PROGRAM LOGREG			-- program name declaration

 -- LOGREG.kl is a logging utility designed to take in an active ultrasonic sensor's reading, and write its value to a logfile upon a defined trigger condition a set number of iterations
 -- LOGREG.kl requires a function call within a .tp program structured as follows: CALL LOGREG[[PR index value], [log file name], [active sensor], [sensor output value], [count iterator]

%NOLOCKGROUP			-- Because this program does not contain any motion
%NOPAUSE = ERROR + COMMAND + TPENABLE  --  Will not pause on ERROR, COMMAND, or TPENABLE
%NOABORT = ERROR + COMMAND + TPENABLE  --  Will not abort on ERROR, COMMAND, or TPENABLE
 -- %INCLUDE logFile.log -- this supposedly includes the logFile that LOGREG is supposed to write data to


%COMMENT = 'MOVE PR TO .LOG UPON TRIG'

CONST
	TPE_TYP_INT = 1
	TPE_TYP_REAL = 2
	TPE_TYP_STR = 3
VAR			-- Variable declaration start
	logFile 		: FILE			-- handles what .log file will be created/written to
	prmPosRegID	: INTEGER		-- handles which position register to pull from
	prmLogFile		: STRING[16]	-- handles log file save desitination
	timeInt		: INTEGER		-- storage location for real-time world clock value
	timeStr		: STRING[18]	-- storage location for post int-to-string conversion of the world clock
	status		: INTEGER		-- '0' denotes normal status, anything else non-zero indicates an error
	posreg		: XYZWPR		-- variable used to input PR data to GET_POS_REG
	fileWithExt		:STRING[4]
	activeUSS	:INTEGER		-- storage location to tell which sensor is giving LOGREG its reading (1 = UIT-502, 2 = UIT-508, 3 = BANNER QT50ULBQ6)
	distUSS	:REAL
	cycleCount		: INTEGER


ROUTINE GET_TPE_PRM2 (param_no : INTEGER; exp_type : INTEGER; int_val : INTEGER; real_val : REAL; str_val : STRING)	-- wraps the built in GET_TPE_PRM prior to checking status and dataType, or ABORTs if not possible
VAR
	data_type	: INTEGER
	status		: INTEGER
	
BEGIN		--program beginning of GET_TPE_PRM2
	GET_TPE_PRM(param_no, data_type, int_val, real_val, str_val, status)	
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] could not get TPE param', param_no, CR)
		ABORT
	ENDIF
	
	IF data_type<>exp_type THEN
		WRITE TPERROR('[LOGREG] bad datatype for param', param_no, CR)
		ABORT
	ENDIF
END GET_TPE_PRM2
		
		
		
ROUTINE GET_TPE_INT (param_no : INTEGER; int_val : INTEGER) 	-- gets the GET_TPE_PRM2 its INTEGER component
VAR
	real_val	: REAL
	str_val	: STRING[1]
BEGIN		-- program beginning of GET_TPE_INT
	GET_TPE_PRM2(param_no, TPE_TYP_INT, int_val, real_val, str_val)		-- int_val, real_val, and str_val must all be present in this call , regardless of if they are not all used
END GET_TPE_INT
	
	
ROUTINE GET_TPE_STR (param_no : INTEGER; str_val : STRING)	-- gets the GET_TPE_PRM2 its STRING component
VAR
	int_val	: INTEGER
	real_val	: REAL
BEGIN		-- program beginning of GET_TPE_STR
	GET_TPE_PRM2(param_no, TPE_TYP_STR, int_val, real_val, str_val)	-- int_val, real_val, and str_val must all be present in this call , regardless of if they are not all used
END GET_TPE_STR

ROUTINE GET_TPE_REAL (param_no : INTEGER; real_val : REAL)		-- gets the GET_TPE_PRM2 its REASL component
VAR
	int_val	: INTEGER
	str_val		: STRING[1]
BEGIN
	GET_TPE_PRM2(param_no, TPE_TYP_REAL, int_val, real_val, str_val)
END GET_TPE_REAL

ROUTINE CNV_TIME_ST2 (timeIn : INTEGER; timeOut : STRING)
VAR
	secondsI : INTEGER
	secondsS : STRING[4]
BEGIN		-- PROGRAM beginning of the timestamp generator
	-- use FANUC built-in functionality to do most of the work
	CNV_TIME_STR(timeIn, timeOut)
	-- chop off trailing spaces, if any are present
	timeOut = SUB_STR(timeOut, 1, 15)
	-- add trailing ':' character
	timeOut = timeOut +':'
	
	--get seconds
	secondsI = timeIn AND 31
	secondsI = secondsI * 2
	
	-- convert to string
	CNV_INT_STR(secondsI, 2, 0, secondsS)
	-- get rid of leading space
	secondsS = SUB_STR(secondsS, 2, 2)
	-- add leading zero if required
	IF timeIn < 10 THEN
		secondsS = '0' + secondsS
	ENDIF
	
	timeOut = timeOut + secondsS
END CNV_TIME_ST2



BEGIN	-- Program beginning of MAIN
	-- clear the TPERROR screen 
	WRITE TPERROR(CHR(128)) 	-- CHR(128) is an interally defined special 128-bit character code that clears the TPERROR window
	
	-- prmPosRegID = 6		-- temporarily hardcoding to tell the program to look at PR6 (testing to see if declaring the variable manually fixes bugs)
	
	GET_TPE_INT(1, prmPosRegID)
	GET_TPE_STR(2, prmLogFile)
	GET_TPE_INT(3, activeUSS)
	GET_TPE_REAL(4, distUSS)
	GET_TPE_INT(5, cycleCount)
	
	GET_TIME(timeInt)
	CNV_TIME_ST2(timeInt, timeStr)
	
	posreg = GET_POS_REG(prmPosRegID, status)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] could not get PR', prmPosRegID, CR)
		ABORT
	ENDIF
	IF UNINIT(posreg) THEN
		WRITE TPERROR('[LOGREG] PR', prmPosRegID, ' is UNINIT', CR)
		ABORT
	ENDIF
	fileWithExt = prmLogFile + '.log'
	-- IF **LOGFILE.LOG EXISTS**
	-- OPEN FILE logFile('AP', prmLogFile) 	-- opens a log file with append (AP) file access privileges
	-- ENDIF
	-- IF **LOGFILE.LOG DOES NOT  EXIST**
	CREATE_VAR (fileWithExt, 'temp', 'logFile.log', 'FILE' ,0, 0, 0, 0, status) -- creates logFile.log
	OPEN FILE logFile ('AP', prmLogFile) 	-- opens a log file with append (AP) file access privileges
	-- ENDIF
	
	status = IO_STATUS(logFile)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] could not open logFile', prmLogFile, CR)
		ABORT
	ENDIF
	
	prmPosRegID = prmPosRegID - 10
	
	WRITE logFile (timeStr, ', Cycle:', cycleCount, ', PROBE POSITION:', prmPosRegID, ', ACTIVE SENSOR:', activeUSS, ', SENSOR READOUT:', distUSS::9::3, ', Z HEIGHT:', posreg.z::9::3, CR) -- testing entries along with the z pos
	 -- WRITE logFile (timeStr, ', PR:',
	--	prmPosRegID, ', X:',		
	--	posreg.x::9::3, ', Y:',
	--	posreg.y::9::3, ', Z:',
	--	posreg.z::9::3, ', W:',
	--	posreg.w::9::3, ', P:',
	--	posreg.p::9::3, ', R:',
	--	posreg.r::9::3, CR)		-- write the PR index, X, Y, Z, W, P, and R fields of the PR sequentially. '::9::3' indicated that this information will be 9 total characters in length (::9), taken to 3 decimal places (::3) after first writing the curren time
	status = IO_STATUS(logFile)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] error writing to logFile', status, CR)
		ABORT
	ENDIF
	
	CLOSE FILE logFile
	
END LOGREG		-- End program 