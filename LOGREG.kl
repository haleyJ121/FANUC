PROGRAM LOGREG			-- program name declaration

%NOLOCKGROUP			-- No motion group can be run when other programs have motion
%NOPAUSE = ERROR + COMMAND + TPENABLE  --  Will not pause on ERROR, COMMAND, or TPENABLE
%NOABORT = ERROR + COMMAND + TPENABLE  --  Will not abort on ERROR, COMMAND, or TPENABLE

%COMMENT = 'MOVE PR TO .LOG UPON TRIG'

CONST
	TPE_TYP_INT = 1
	TPE_TYP_REAL = 2
	TPE_TYP_STR = 3
VAR			-- Variable declaration start
	logFile 		: FILE			-- handles what .log file will be created/written to
	prmPosRegID	: INTEGER		-- handles which position register to pull from
	prmLogFile		: STRING[16]	-- handles log file save desitination
	timeInt		: INTEGER		-- storage location for real-time world clock value
	timeStr		: STRING[18]	-- storage location for post int-to-string conversion of the world clock
	posreg		: XYZWPR		-- temporary variable used to input PR data to GET_POS_REG
	status		: INTEGER		-- '0' denotes normal status, anything else non-zero indicates an error
	
	-- dataType	: INTEGER		-- describes datatype input (1=int, 2=real, 3=string)
	-- intVal		: INTEGER		-- defines the value of 1 made avaiable to dataType
	-- realVal		: REAL			-- defines the value of 2 made avaiable to dataType
	-- strVal		:STRING[1]		-- defines the value of 3 made avaiable to dataType



ROUTINE GET_TPE_PRM2 (paramNo : INTEGER; exptype : INTEGER; intVal : INTEGER; realVal : REAL; strVAL : STRING)	-- wraps the built in GET_TPE_PRM prior to checking status and dataType, or ABORTs if not possible
VAR
	dataType	: INTEGER
	status		: INTEGER
BEGIN		--program beginning of GET_TPE_PRM2
	GET_TPE_PRM2(paramNo, dataType, intVal, realVal, strVal, status)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] could not get TPE param', paramNo, CR)
		ABORT
	ENDIF
	
	IF dataType<>expType THEN
		WRITE TPERROR('{LOGREG] bad datatype for param', paramNo, CR)
		ABORT
	ENDIF
END GET_TPE_PRM2
		
		
		
ROUTINE GET_TPE_INT (paramNo : INTEGER; intVal : INTEGER) 	-- gets the GET_TPE_PRM2 its INTEGER component
VAR
	realVal	: REAL
	strVal	: STRING[1]
BEGIN		-- program beginning of GET_TPE_INT
	GET_TPE_PRM2(paramNo, TPE_TYP_INT, intVal, realVal, strVal)
END GET_TPE_INT
	
	
ROUTINE GET_TPE_STR (paramNo : INTEGER; strVal : STRING)	-- gets the GET_TPE_PRM2 its STRING component
VAR
	intVal	: INTEGER
	realVal	: REAL
BEGIN		-- program beginning of GET_TPE_STR
	GET_TPE_PRM2(paramNo, TPE_TYP_STR, intVal, realVal, strVal)
END GET_TPE_STR



ROUTINE CNV_TIME_ST2 (timeIn : INTEGER; timeOut : STRING)
VAR
	secondsI : INTEGER
	secondsS : STRING[4]
BEGIN		-- PROGRAM beginning of the timestamp generator
	-- use FANUC built-in functionality to do most of the work
	CNV_TIME_STR(timeIn, timeOut)
	-- chop off trailing spaces, if any are present
	timeOut = SUB_STR(timeOut, 1, 15)
	-- add trailing ':' character
	timeOut = timeOut +':'
	
	--get seconds
	secondsI = timeIn AND 31
	secondsI = secondsI * 2
	
	-- convert to string
	CNV_INT_STR(secondsI, 2, 0, secondsS)
	-- get rid of leading space
	secondsS = SUB_STR(secondsS, 2, 2)
	-- add leading zero if required
	IF timeIn < 10 THEN
		secondsS = '0' + secondsS
	ENDIF
	
	timeOut = timeOut + secondsS
END CNV_TIME_ST2



BEGIN		-- Program beginning of MAIN
	-- clear the TPERROR screen 
	WRITE TPERROR(CHR(128)) 	-- CHR(128) is an interally defined special 128-bit character code that clears the window
	
	GET_TPE_INT(1, prmPosRegID)
	GET_TPE_STR(2, prmLogFile)
	
	GET_TIME(timeInt)
	CNV_TIME_ST2(timeInt, timeStr)
	
	posreg = GET_POS_REG(prmPosRegID, status)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG} could not get PR', prmPosRegID, CR)
		ABORT
	ENDIF
	IF UNINIT(posreg) THEN
		WRITE TPERROR('[LOGREG] PR', prmPosRegID, ' is UNINIT', CR)
		ABORT
	ENDIF
	
	OPEN FILE logFile('AP', prmLogFile) 	-- opens (if not creates then opens) a log file with append (AP) file access privileges
	status = IO_STATUS(logFile)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] could not open logFile', prmLogFile, CR)
		ABORT
	ENDIF
	WRITE logFile (timeStr, ',',
		prmPosRegID, ',',		
		posreg.x::9::3, ',',
		posreg.y::9::3, ',',
		posreg.z::9::3, ',',
		posreg.w::9::3, ',',
		posreg.p::9::3, ',',
		posreg.r::9::3, CR)		-- write the X, Y, Z, W, P, and R PR fields of the PR sequentially. '::9::3' indicated that this information will be 9 total characters in length (::9), taken to 3 decimal places (::3) after first writing the curren time
	status = IO_STATUS(logFile)
	IF status<>0 THEN
		WRITE TPERROR('[LOGREG] error writing to logFile', status, CR)
		ABORT
	ENDIF
	
	CLOSE FILE logFile
	
END LOGREG		-- End program 